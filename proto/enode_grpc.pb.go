// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: enode.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnodeManagerInterfaceClient is the client API for EnodeManagerInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnodeManagerInterfaceClient interface {
	HandStartStream(ctx context.Context, in *StartStreamReq, opts ...grpc.CallOption) (EnodeManagerInterface_HandStartStreamClient, error)
	HandSendTx(ctx context.Context, in *SendTxReq, opts ...grpc.CallOption) (*SendTxRes, error)
	HandSendTxToCoinBase(ctx context.Context, in *SendTxToCoinBaseReq, opts ...grpc.CallOption) (*SendTxRes, error)
}

type enodeManagerInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnodeManagerInterfaceClient(cc grpc.ClientConnInterface) EnodeManagerInterfaceClient {
	return &enodeManagerInterfaceClient{cc}
}

func (c *enodeManagerInterfaceClient) HandStartStream(ctx context.Context, in *StartStreamReq, opts ...grpc.CallOption) (EnodeManagerInterface_HandStartStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnodeManagerInterface_ServiceDesc.Streams[0], "/EnodeManagerInterface/handStartStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &enodeManagerInterfaceHandStartStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnodeManagerInterface_HandStartStreamClient interface {
	Recv() (*StartStreamRes, error)
	grpc.ClientStream
}

type enodeManagerInterfaceHandStartStreamClient struct {
	grpc.ClientStream
}

func (x *enodeManagerInterfaceHandStartStreamClient) Recv() (*StartStreamRes, error) {
	m := new(StartStreamRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *enodeManagerInterfaceClient) HandSendTx(ctx context.Context, in *SendTxReq, opts ...grpc.CallOption) (*SendTxRes, error) {
	out := new(SendTxRes)
	err := c.cc.Invoke(ctx, "/EnodeManagerInterface/handSendTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enodeManagerInterfaceClient) HandSendTxToCoinBase(ctx context.Context, in *SendTxToCoinBaseReq, opts ...grpc.CallOption) (*SendTxRes, error) {
	out := new(SendTxRes)
	err := c.cc.Invoke(ctx, "/EnodeManagerInterface/handSendTxToCoinBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnodeManagerInterfaceServer is the server API for EnodeManagerInterface service.
// All implementations must embed UnimplementedEnodeManagerInterfaceServer
// for forward compatibility
type EnodeManagerInterfaceServer interface {
	HandStartStream(*StartStreamReq, EnodeManagerInterface_HandStartStreamServer) error
	HandSendTx(context.Context, *SendTxReq) (*SendTxRes, error)
	HandSendTxToCoinBase(context.Context, *SendTxToCoinBaseReq) (*SendTxRes, error)
	mustEmbedUnimplementedEnodeManagerInterfaceServer()
}

// UnimplementedEnodeManagerInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedEnodeManagerInterfaceServer struct {
}

func (UnimplementedEnodeManagerInterfaceServer) HandStartStream(*StartStreamReq, EnodeManagerInterface_HandStartStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HandStartStream not implemented")
}
func (UnimplementedEnodeManagerInterfaceServer) HandSendTx(context.Context, *SendTxReq) (*SendTxRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandSendTx not implemented")
}
func (UnimplementedEnodeManagerInterfaceServer) HandSendTxToCoinBase(context.Context, *SendTxToCoinBaseReq) (*SendTxRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandSendTxToCoinBase not implemented")
}
func (UnimplementedEnodeManagerInterfaceServer) mustEmbedUnimplementedEnodeManagerInterfaceServer() {}

// UnsafeEnodeManagerInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnodeManagerInterfaceServer will
// result in compilation errors.
type UnsafeEnodeManagerInterfaceServer interface {
	mustEmbedUnimplementedEnodeManagerInterfaceServer()
}

func RegisterEnodeManagerInterfaceServer(s grpc.ServiceRegistrar, srv EnodeManagerInterfaceServer) {
	s.RegisterService(&EnodeManagerInterface_ServiceDesc, srv)
}

func _EnodeManagerInterface_HandStartStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnodeManagerInterfaceServer).HandStartStream(m, &enodeManagerInterfaceHandStartStreamServer{stream})
}

type EnodeManagerInterface_HandStartStreamServer interface {
	Send(*StartStreamRes) error
	grpc.ServerStream
}

type enodeManagerInterfaceHandStartStreamServer struct {
	grpc.ServerStream
}

func (x *enodeManagerInterfaceHandStartStreamServer) Send(m *StartStreamRes) error {
	return x.ServerStream.SendMsg(m)
}

func _EnodeManagerInterface_HandSendTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodeManagerInterfaceServer).HandSendTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EnodeManagerInterface/handSendTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodeManagerInterfaceServer).HandSendTx(ctx, req.(*SendTxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnodeManagerInterface_HandSendTxToCoinBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTxToCoinBaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnodeManagerInterfaceServer).HandSendTxToCoinBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EnodeManagerInterface/handSendTxToCoinBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnodeManagerInterfaceServer).HandSendTxToCoinBase(ctx, req.(*SendTxToCoinBaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EnodeManagerInterface_ServiceDesc is the grpc.ServiceDesc for EnodeManagerInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnodeManagerInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EnodeManagerInterface",
	HandlerType: (*EnodeManagerInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "handSendTx",
			Handler:    _EnodeManagerInterface_HandSendTx_Handler,
		},
		{
			MethodName: "handSendTxToCoinBase",
			Handler:    _EnodeManagerInterface_HandSendTxToCoinBase_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "handStartStream",
			Handler:       _EnodeManagerInterface_HandStartStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "enode.proto",
}
